// src/utils/geminiService.js
import { GoogleGenerativeAI } from "@google/generative-ai";

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

let genAI;
if (API_KEY) {
  genAI = new GoogleGenerativeAI(API_KEY);
}

/**
 * Generate recipes using Gemini AI based on user's ingredients
 */
export async function generateRecipes(userIngredients, cuisine = null) {
  if (!genAI) {
    throw new Error('Gemini API key not configured');
  }

  const ingredientList = userIngredients.join(', ');
  const cuisineFilter = cuisine ? ` in ${cuisine} style` : '';
  
  const prompt = `You are a helpful cooking assistant for college students who need simple, affordable recipes.

Given these ingredients: ${ingredientList}

Generate 5 different recipe ideas and rank them based on diffculty and time ${cuisineFilter} that use ONLY these ingredients plus common pantry staples (salt, pepper, oil, water, sugar, butter).

For each recipe, provide:
1. Recipe name
2. Difficulty level (Easy/Medium)
3. Cooking time
4. List of ingredients with measurements
5. Step-by-step cooking instructions (numbered, clear, and concise)
6. Pro tip for college students

Format your response as a JSON array with this structure:
[
  {
    "name": "Recipe Name",
    "difficulty": "Easy",
    "cookingTime": "20 minutes",
    "servings": 2,
    "ingredients": [
      {"item": "chicken breast", "amount": "2 pieces"},
      {"item": "rice", "amount": "1 cup"}
    ],
    "instructions": [
      "Step 1 description",
      "Step 2 description"
    ],
    "proTip": "Helpful tip for students"
  }
]

Make recipes simple, budget-friendly, and realistic for college students. No fancy equipment or techniques.`;

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    // Extract JSON from response
    const jsonMatch = text.match(/\[[\s\S]*\]/);
    if (!jsonMatch) {
      throw new Error('Could not parse recipe data');
    }
    
    const recipes = JSON.parse(jsonMatch[0]);
    return recipes;
  } catch (error) {
    console.error('Error generating recipes:', error);
    throw error;
  }
}

/**
 * Generate a single detailed recipe
 */
export async function generateSingleRecipe(userIngredients, recipeName = null) {
  if (!genAI) {
    throw new Error('Gemini API key not configured');
  }

  const ingredientList = userIngredients.join(', ');
  const recipeRequest = recipeName ? `for "${recipeName}"` : 'that would be perfect for college students';
  
  const prompt = `Create a detailed recipe ${recipeRequest} using these ingredients: ${ingredientList}

Also allow common pantry staples: salt, pepper, oil, water, sugar, butter, soy sauce, garlic powder.
Please do not mention any AI on our page. It should not say anything was generated by AI. 

Provide:
1. Creative recipe name
2. Brief description (why students will love it)
3. Prep time and cook time
4. Servings
5. Full ingredient list with precise measurements
6. Detailed step-by-step instructions
7. Cooking tips
8. Estimated cost (Low/Medium/High for college budget)

Format as JSON:
{
  "name": "Recipe Name",
  "description": "Why this recipe is great",
  "prepTime": "10 minutes",
  "cookTime": "15 minutes",
  "servings": 2,
  "difficulty": "Easy",
  "estimatedCost": "Low",
  "ingredients": [
    {"item": "ingredient", "amount": "measurement", "isStaple": false}
  ],
  "instructions": [
    {"step": 1, "instruction": "Detailed step"},
    {"step": 2, "instruction": "Detailed step"}
  ],
  "tips": ["Tip 1", "Tip 2"],
  "nutritionNote": "Brief nutrition info"
}`;

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Could not parse recipe data');
    }
    
    const recipe = JSON.parse(jsonMatch[0]);
    return recipe;
  } catch (error) {
    console.error('Error generating recipe:', error);
    throw error;
  }
}

/**
 * Get cooking suggestions and tips
 */
export async function getCookingTips(ingredients) {
  if (!genAI) {
    throw new Error('Gemini API key not configured');
  }

  const prompt = `Given these ingredients: ${ingredients.join(', ')}

Provide 3-5 quick cooking tips for college students, such as:
- How to prep ingredients efficiently
- Common mistakes to avoid
- Ways to enhance flavor
- Storage tips
- Budget-saving suggestions

Keep it practical and concise. Return as a JSON array of strings.`;

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    const jsonMatch = text.match(/\[[\s\S]*\]/);
    if (!jsonMatch) {
      return ['Prep all ingredients before cooking', 'Season to taste', 'Don\'t rush the cooking process'];
    }
    
    return JSON.parse(jsonMatch[0]);
  } catch (error) {
    console.error('Error getting tips:', error);
    return ['Prep all ingredients before cooking', 'Season to taste', 'Don\'t rush the cooking process'];
  }
}